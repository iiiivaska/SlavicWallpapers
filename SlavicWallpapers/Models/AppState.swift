import SwiftUI

/// –ì–ª–∞–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —É–ø—Ä–∞–≤–ª—è—é—â–µ–µ –≤—Å–µ–º–∏ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.
///
/// `AppState` —è–≤–ª—è–µ—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏—Å—Ç–∏–Ω—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è,
/// —Ä–µ–∞–ª–∏–∑—É—è –ø–∞—Ç—Ç–µ—Ä–Ω Singleton –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
///
/// ## –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
/// - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–º –æ–±–æ–µ–≤
/// - –ö–æ–Ω—Ç—Ä–æ–ª—å —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
/// - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
/// - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
///
/// ## –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/// ```swift
/// let appState = AppState.shared
/// await appState.updateWallpaper()
/// ```
@MainActor
final class AppState: ObservableObject {
    static let shared = AppState()

    @Published var isUpdating = false
    @Published var lastUpdate: Date?
    @Published var error: String?
    @Published var isBackgroundEnabled = true
    @Published private(set) var wallpaperMode: WallpaperMode = .same
    @Published private(set) var updateInterval: UpdateInterval = .default
    @Published var showingIntervalPicker = false

    private init() {
        Task { @MainActor in
            self.wallpaperMode = await WallpaperManager.shared.getCurrentMode()
        }
    }

    func updateWallpaper() {
        print("üîÑ Starting wallpaper update...")
        
        Task { @MainActor in
            isUpdating = true
            error = nil
            
            do {
                print("üì• Downloading new wallpaper...")
                let imageUrl = try await ImageService.shared.downloadAndCacheImage()
                print("‚úÖ Downloaded wallpaper to: \(imageUrl)")
                
                print("üñº Setting wallpaper...")
                try await WallpaperManager.shared.setWallpaper(from: imageUrl)
                print("‚úÖ Wallpaper set successfully")
                
                self.isUpdating = false
                self.lastUpdate = Date()
                await BackgroundService.shared.updateLastUpdateTime()
            } catch let error as AppError {
                print("‚ùå Error updating wallpaper: \(error)")
                self.isUpdating = false
                self.error = error.localizedDescription
            } catch {
                print("‚ùå Unknown error: \(error)")
                self.isUpdating = false
                self.error = Localizable.Error.unknown
            }
        }
    }

    func openWallpapersFolder() {
        Task { @MainActor in
            let urls = await ImageService.shared.getCachedImages()
            if let firstImage = urls.first {
                NSWorkspace.shared.selectFile(
                    firstImage.path,
                    inFileViewerRootedAtPath: firstImage.deletingLastPathComponent().path
                )
            }
        }
    }

    func toggleBackgroundUpdates() {
        isBackgroundEnabled.toggle()
        Task {
            if isBackgroundEnabled {
                await BackgroundService.shared.startBackgroundUpdates()
            } else {
                await BackgroundService.shared.stopBackgroundUpdates()
            }
        }
    }

    func setWallpaperMode(_ mode: WallpaperMode) async {
        guard !isUpdating else { return }

        isUpdating = true
        error = nil
        do {
            await WallpaperManager.shared.setMode(mode)
            self.wallpaperMode = mode

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–æ–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
            let imageUrl = try await ImageService.shared.downloadAndCacheImage()
            try await WallpaperManager.shared.setWallpaper(from: imageUrl)

            self.isUpdating = false
            self.lastUpdate = Date()
        } catch {
            self.isUpdating = false
            self.error = error.localizedDescription
        }
    }

    func setUpdateInterval(_ interval: UpdateInterval) async {
        await BackgroundService.shared.setUpdateInterval(interval)
        self.updateInterval = interval
    }
}
